// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: notification_channels.sql

package notificationchannels

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const createNotificationChannel = `-- name: CreateNotificationChannel :one
INSERT INTO notification_channels (id, tenant_id, name, type, config)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, tenant_id, name, type, config, created_at
`

type CreateNotificationChannelParams struct {
	ID       uuid.UUID       `json:"id"`
	TenantID uuid.UUID       `json:"tenant_id"`
	Name     string          `json:"name"`
	Type     string          `json:"type"`
	Config   json.RawMessage `json:"config"`
}

func (q *Queries) CreateNotificationChannel(ctx context.Context, arg CreateNotificationChannelParams) (NotificationChannel, error) {
	row := q.db.QueryRowContext(ctx, createNotificationChannel,
		arg.ID,
		arg.TenantID,
		arg.Name,
		arg.Type,
		arg.Config,
	)
	var i NotificationChannel
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.Type,
		&i.Config,
		&i.CreatedAt,
	)
	return i, err
}

const getNotificationChannelByID = `-- name: GetNotificationChannelByID :one
SELECT id, tenant_id, name, type, config, created_at
FROM notification_channels
WHERE id = $1
`

func (q *Queries) GetNotificationChannelByID(ctx context.Context, id uuid.UUID) (NotificationChannel, error) {
	row := q.db.QueryRowContext(ctx, getNotificationChannelByID, id)
	var i NotificationChannel
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.Type,
		&i.Config,
		&i.CreatedAt,
	)
	return i, err
}

const getNotificationChannelByTenantAndName = `-- name: GetNotificationChannelByTenantAndName :one
SELECT id, tenant_id, name, type, config, created_at
FROM notification_channels
WHERE tenant_id = $1 AND name = $2
`

type GetNotificationChannelByTenantAndNameParams struct {
	TenantID uuid.UUID `json:"tenant_id"`
	Name     string    `json:"name"`
}

func (q *Queries) GetNotificationChannelByTenantAndName(ctx context.Context, arg GetNotificationChannelByTenantAndNameParams) (NotificationChannel, error) {
	row := q.db.QueryRowContext(ctx, getNotificationChannelByTenantAndName, arg.TenantID, arg.Name)
	var i NotificationChannel
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.Type,
		&i.Config,
		&i.CreatedAt,
	)
	return i, err
}

const listNotificationChannels = `-- name: ListNotificationChannels :many
SELECT id, tenant_id, name, type, config, created_at
FROM notification_channels
WHERE tenant_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListNotificationChannels(ctx context.Context, tenantID uuid.UUID) ([]NotificationChannel, error) {
	rows, err := q.db.QueryContext(ctx, listNotificationChannels, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NotificationChannel
	for rows.Next() {
		var i NotificationChannel
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.Name,
			&i.Type,
			&i.Config,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

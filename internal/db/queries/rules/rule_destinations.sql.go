// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: rule_destinations.sql

package rules

import (
	"context"

	"github.com/google/uuid"
)

const createRuleDestination = `-- name: CreateRuleDestination :one
INSERT INTO rule_destinations (rule_id, channel_id)
VALUES ($1, $2)
RETURNING rule_id, channel_id
`

type CreateRuleDestinationParams struct {
	RuleID    uuid.UUID `json:"rule_id"`
	ChannelID uuid.UUID `json:"channel_id"`
}

func (q *Queries) CreateRuleDestination(ctx context.Context, arg CreateRuleDestinationParams) (RuleDestination, error) {
	row := q.db.QueryRowContext(ctx, createRuleDestination, arg.RuleID, arg.ChannelID)
	var i RuleDestination
	err := row.Scan(&i.RuleID, &i.ChannelID)
	return i, err
}

const deleteRuleDestination = `-- name: DeleteRuleDestination :exec
DELETE FROM rule_destinations WHERE rule_id = $1 AND channel_id = $2
`

type DeleteRuleDestinationParams struct {
	RuleID    uuid.UUID `json:"rule_id"`
	ChannelID uuid.UUID `json:"channel_id"`
}

func (q *Queries) DeleteRuleDestination(ctx context.Context, arg DeleteRuleDestinationParams) error {
	_, err := q.db.ExecContext(ctx, deleteRuleDestination, arg.RuleID, arg.ChannelID)
	return err
}

const listNotificationChannelsForRule = `-- name: ListNotificationChannelsForRule :many
SELECT nc.id, nc.tenant_id, nc.name, nc.type, nc.config, nc.created_at
FROM notification_channels nc
JOIN rule_destinations rd ON nc.id = rd.channel_id
WHERE rd.rule_id = $1
`

func (q *Queries) ListNotificationChannelsForRule(ctx context.Context, ruleID uuid.UUID) ([]NotificationChannel, error) {
	rows, err := q.db.QueryContext(ctx, listNotificationChannelsForRule, ruleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NotificationChannel
	for rows.Next() {
		var i NotificationChannel
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.Name,
			&i.Type,
			&i.Config,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRuleDestinationChannelIDs = `-- name: ListRuleDestinationChannelIDs :many
SELECT channel_id FROM rule_destinations WHERE rule_id = $1
`

func (q *Queries) ListRuleDestinationChannelIDs(ctx context.Context, ruleID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, listRuleDestinationChannelIDs, ruleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var channel_id uuid.UUID
		if err := rows.Scan(&channel_id); err != nil {
			return nil, err
		}
		items = append(items, channel_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

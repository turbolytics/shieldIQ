// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: events.sql

package events

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
)

const fetchNextEventForProcessing = `-- name: FetchNextEventForProcessing :one
UPDATE event_processing_queue
SET status = 'processing',
    locked_at = now(),
    locked_by = $1
WHERE id = (
    SELECT id
    FROM event_processing_queue
    WHERE status = 'pending'
    ORDER BY id
    FOR UPDATE SKIP LOCKED
            LIMIT 1
            )
            RETURNING event_id
`

func (q *Queries) FetchNextEventForProcessing(ctx context.Context, lockedBy sql.NullString) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, fetchNextEventForProcessing, lockedBy)
	var event_id uuid.UUID
	err := row.Scan(&event_id)
	return event_id, err
}

const getEventByID = `-- name: GetEventByID :one
SELECT id, tenant_id, webhook_id, source, event_type, action, raw_payload, dedup_hash, received_at FROM events WHERE id = $1
`

func (q *Queries) GetEventByID(ctx context.Context, id uuid.UUID) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEventByID, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.WebhookID,
		&i.Source,
		&i.EventType,
		&i.Action,
		&i.RawPayload,
		&i.DedupHash,
		&i.ReceivedAt,
	)
	return i, err
}

const insertEvent = `-- name: InsertEvent :one
INSERT INTO events (
    tenant_id,
    webhook_id,
    source,
    event_type,
    action,
    raw_payload,
    dedup_hash
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, tenant_id, webhook_id, source, event_type, action, raw_payload, dedup_hash, received_at
`

type InsertEventParams struct {
	TenantID   uuid.UUID       `json:"tenant_id"`
	WebhookID  uuid.UUID       `json:"webhook_id"`
	Source     string          `json:"source"`
	EventType  string          `json:"event_type"`
	Action     sql.NullString  `json:"action"`
	RawPayload json.RawMessage `json:"raw_payload"`
	DedupHash  sql.NullString  `json:"dedup_hash"`
}

func (q *Queries) InsertEvent(ctx context.Context, arg InsertEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, insertEvent,
		arg.TenantID,
		arg.WebhookID,
		arg.Source,
		arg.EventType,
		arg.Action,
		arg.RawPayload,
		arg.DedupHash,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.WebhookID,
		&i.Source,
		&i.EventType,
		&i.Action,
		&i.RawPayload,
		&i.DedupHash,
		&i.ReceivedAt,
	)
	return i, err
}

const insertEventProcessingQueue = `-- name: InsertEventProcessingQueue :one
INSERT INTO event_processing_queue (event_id)
VALUES ($1)
    RETURNING id, event_id, status, locked_at, locked_by, processed_at, error
`

func (q *Queries) InsertEventProcessingQueue(ctx context.Context, eventID uuid.UUID) (EventProcessingQueue, error) {
	row := q.db.QueryRowContext(ctx, insertEventProcessingQueue, eventID)
	var i EventProcessingQueue
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Status,
		&i.LockedAt,
		&i.LockedBy,
		&i.ProcessedAt,
		&i.Error,
	)
	return i, err
}

const markEventProcessingDone = `-- name: MarkEventProcessingDone :exec
UPDATE event_processing_queue
SET status = 'done', processed_at = now()
WHERE event_id = $1
`

func (q *Queries) MarkEventProcessingDone(ctx context.Context, eventID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, markEventProcessingDone, eventID)
	return err
}

const markEventProcessingFailed = `-- name: MarkEventProcessingFailed :exec
UPDATE event_processing_queue
SET status = 'failed', error = $2, processed_at = now()
WHERE event_id = $1
`

type MarkEventProcessingFailedParams struct {
	EventID uuid.UUID      `json:"event_id"`
	Error   sql.NullString `json:"error"`
}

func (q *Queries) MarkEventProcessingFailed(ctx context.Context, arg MarkEventProcessingFailedParams) error {
	_, err := q.db.ExecContext(ctx, markEventProcessingFailed, arg.EventID, arg.Error)
	return err
}

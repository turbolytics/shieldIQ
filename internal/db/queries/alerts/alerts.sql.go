// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: alerts.sql

package alerts

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAlert = `-- name: CreateAlert :one
INSERT INTO alerts (    id, tenant_id, rule_id, event_id, triggered_at
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, tenant_id, rule_id, event_id, triggered_at
`

type CreateAlertParams struct {
	ID          uuid.UUID    `json:"id"`
	TenantID    uuid.UUID    `json:"tenant_id"`
	RuleID      uuid.UUID    `json:"rule_id"`
	EventID     uuid.UUID    `json:"event_id"`
	TriggeredAt sql.NullTime `json:"triggered_at"`
}

type CreateAlertRow struct {
	ID          uuid.UUID    `json:"id"`
	TenantID    uuid.UUID    `json:"tenant_id"`
	RuleID      uuid.UUID    `json:"rule_id"`
	EventID     uuid.UUID    `json:"event_id"`
	TriggeredAt sql.NullTime `json:"triggered_at"`
}

func (q *Queries) CreateAlert(ctx context.Context, arg CreateAlertParams) (CreateAlertRow, error) {
	row := q.db.QueryRowContext(ctx, createAlert,
		arg.ID,
		arg.TenantID,
		arg.RuleID,
		arg.EventID,
		arg.TriggeredAt,
	)
	var i CreateAlertRow
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.RuleID,
		&i.EventID,
		&i.TriggeredAt,
	)
	return i, err
}

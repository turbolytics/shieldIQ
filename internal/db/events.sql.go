// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: events.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
)

const getEventByID = `-- name: GetEventByID :one
SELECT id, tenant_id, webhook_id, source, event_type, action, raw_payload, dedup_hash, received_at FROM events WHERE id = $1
`

func (q *Queries) GetEventByID(ctx context.Context, id uuid.UUID) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEventByID, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.WebhookID,
		&i.Source,
		&i.EventType,
		&i.Action,
		&i.RawPayload,
		&i.DedupHash,
		&i.ReceivedAt,
	)
	return i, err
}

const insertEvent = `-- name: InsertEvent :one
INSERT INTO events (
    tenant_id,
    webhook_id,
    source,
    event_type,
    action,
    raw_payload,
    dedup_hash
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, tenant_id, webhook_id, source, event_type, action, raw_payload, dedup_hash, received_at
`

type InsertEventParams struct {
	TenantID   uuid.UUID       `json:"tenant_id"`
	WebhookID  uuid.UUID       `json:"webhook_id"`
	Source     string          `json:"source"`
	EventType  string          `json:"event_type"`
	Action     sql.NullString  `json:"action"`
	RawPayload json.RawMessage `json:"raw_payload"`
	DedupHash  sql.NullString  `json:"dedup_hash"`
}

func (q *Queries) InsertEvent(ctx context.Context, arg InsertEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, insertEvent,
		arg.TenantID,
		arg.WebhookID,
		arg.Source,
		arg.EventType,
		arg.Action,
		arg.RawPayload,
		arg.DedupHash,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.WebhookID,
		&i.Source,
		&i.EventType,
		&i.Action,
		&i.RawPayload,
		&i.DedupHash,
		&i.ReceivedAt,
	)
	return i, err
}

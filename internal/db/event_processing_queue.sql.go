// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: event_processing_queue.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const fetchNextEventForProcessing = `-- name: FetchNextEventForProcessing :one
UPDATE event_processing_queue
SET status = 'processing',
    locked_at = now(),
    locked_by = $1
WHERE id = (
    SELECT id
    FROM event_processing_queue
    WHERE status = 'pending'
    ORDER BY id
    FOR UPDATE SKIP LOCKED
    LIMIT 1
)
RETURNING event_id
`

func (q *Queries) FetchNextEventForProcessing(ctx context.Context, lockedBy sql.NullString) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, fetchNextEventForProcessing, lockedBy)
	var event_id uuid.UUID
	err := row.Scan(&event_id)
	return event_id, err
}

const insertEventProcessingQueue = `-- name: InsertEventProcessingQueue :one
INSERT INTO event_processing_queue (event_id)
VALUES ($1)
RETURNING id, event_id, status, locked_at, locked_by, processed_at, error
`

func (q *Queries) InsertEventProcessingQueue(ctx context.Context, eventID uuid.UUID) (EventProcessingQueue, error) {
	row := q.db.QueryRowContext(ctx, insertEventProcessingQueue, eventID)
	var i EventProcessingQueue
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Status,
		&i.LockedAt,
		&i.LockedBy,
		&i.ProcessedAt,
		&i.Error,
	)
	return i, err
}

const markEventProcessingDone = `-- name: MarkEventProcessingDone :exec
UPDATE event_processing_queue
SET status = 'done', processed_at = now()
WHERE event_id = $1
`

func (q *Queries) MarkEventProcessingDone(ctx context.Context, eventID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, markEventProcessingDone, eventID)
	return err
}

const markEventProcessingFailed = `-- name: MarkEventProcessingFailed :exec
UPDATE event_processing_queue
SET status = 'failed', error = $2, processed_at = now()
WHERE event_id = $1
`

type MarkEventProcessingFailedParams struct {
	EventID uuid.UUID      `json:"event_id"`
	Error   sql.NullString `json:"error"`
}

func (q *Queries) MarkEventProcessingFailed(ctx context.Context, arg MarkEventProcessingFailedParams) error {
	_, err := q.db.ExecContext(ctx, markEventProcessingFailed, arg.EventID, arg.Error)
	return err
}
